# Remove 'VARIABLES=' and split on comma
var_names <- gsub('^VARIABLES=', '', var_line)
var_names <- gsub('"', '', var_names)  # remove quotes
var_names <- trimws(unlist(strsplit(var_names, ",")))
# Find the first line of actual data (starts after 'zone t=' line)
zone_line_index <- grep("^zone",lines_w, ignore.case = TRUE)
data_start_index <- zone_line_index + 1
# Read the data portion only
data_lines <- lines_w[data_start_index:length(lines_w)]
data <- read.table(text = paste(data_lines, collapse = "\n"), col.names = var_names)
data$time_d=data$Time[1]
data$time_d[2:116]=data$Time[2:116]-data$Time[1:115]
data=data[,c(1,21,2:20)]
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\HGS_standalone")
write.table(data,"hgs_watbal.csv",col.names = T,row.names = F,sep = ",",dec = ".")
data[,c(3:21)]=data[,c(3:21)]/4*data$time_d*1000
#### dssat ####
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\DSSAT_no_inflow_satflow")
library(readxl)
dssat=read_xlsx(path = "dssat-hgs.xlsx",sheet = "Sat layer DSSAT wheat",skip = 1)
dssat[,c(2:10)]= dssat[,c(2:10)]/0.44
dssat
colnames(dssat)=c("time","3.0","2.95","2.85","2.7","2.55","2.4","2.25","2.1","1.8")
dssat%>%
gather("Zsurf","VWC",`3.0`:`1.8`)->dssat
dssat$Zsurf=as.numeric(dssat$Zsurf)
dssat$model="dssat"
final_data%>%
select(time,Zsurf,VWC)%>%
filter(Zsurf>1)->hgs
hgs$model="hgs"
ggplot() +
geom_line(data = hgs, aes(x = time, y = VWC, col = model), size = 1) +
geom_point(data = dssat, aes(x = time, y = VWC, color = model), size = 1, shape = 16) +
labs(x = "Time", y = "Volumetric Water Content (VWC)", color = "Zsurf") +
facet_wrap(~as.factor(Zsurf))+
theme_minimal()
colSums(data[,c(3:21)])
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\model\\HGS\\stand_alone\\lys\\hgs")
library(ggplot2)
library(tidyr)
library(dplyr)
options(scipen=999)
file_path <- "lys_Eo.observation_well_flow.sat_prof.dat"
lines <- readLines(file_path)
# Find the line with VARIABLES
var_line <- grep("^VARIABLES=", lines)
variables <- gsub('^VARIABLES=|\"', '', lines[var_line])
var_names <- strsplit(variables, ",")[[1]]
var_names <- trimws(var_names)
# Find the start lines of ZONE blocks
zone_lines <- grep("^ZONE", lines)
zone_starts <- zone_lines
zone_ends <- c(zone_lines[-1] - 1, length(lines))
# Initialize a list to store zone data
zone_data_list <- list()
for (i in seq_along(zone_starts)) {
zone_header <- lines[zone_starts[i]]
# Extract SOLUTIONTIME from ZONE header
sol_time <- as.numeric(sub(".*SOLUTIONTIME=([0-9.Ee+-]+).*", "\\1", zone_header))
# Extract number of rows in this zone (from I=13)
num_rows <- as.numeric(sub(".*I=([0-9]+).*", "\\1", zone_header))
# Extract the raw data block
data_lines <- lines[(zone_starts[i] + 1):zone_ends[i]]
data_values <- as.numeric(unlist(strsplit(paste(data_lines, collapse = " "), "\\s+")))
# Convert to data.frame
zone_df <- as.data.frame(matrix(data_values, ncol = length(var_names), byrow = TRUE))
colnames(zone_df) <- var_names
zone_df$time <- sol_time
# Store it
zone_data_list[[i]] <- zone_df
}
final_data <- do.call(rbind, zone_data_list)
#### water balance ####
lines_w=readLines("lys_Eo.water_balance.dat")
# Find line with VARIABLES
var_line_index <- grep("^VARIABLES=", lines_w)
var_line <- lines_w[var_line_index]
# Extract variable names
# Remove 'VARIABLES=' and split on comma
var_names <- gsub('^VARIABLES=', '', var_line)
var_names <- gsub('"', '', var_names)  # remove quotes
var_names <- trimws(unlist(strsplit(var_names, ",")))
# Find the first line of actual data (starts after 'zone t=' line)
zone_line_index <- grep("^zone",lines_w, ignore.case = TRUE)
data_start_index <- zone_line_index + 1
# Read the data portion only
data_lines <- lines_w[data_start_index:length(lines_w)]
data <- read.table(text = paste(data_lines, collapse = "\n"), col.names = var_names)
data$time_d=data$Time[1]
data$time_d[2:116]=data$Time[2:116]-data$Time[1:115]
data=data[,c(1,21,2:20)]
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\HGS_standalone")
write.table(data,"hgs_watbal.csv",col.names = T,row.names = F,sep = ",",dec = ".")
data[,c(3:21)]=data[,c(3:21)]/4*data$time_d*1000
#### dssat ####
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\DSSAT_no_inflow_satflow")
library(readxl)
dssat=read_xlsx(path = "dssat-hgs.xlsx",sheet = "Sat layer DSSAT wheat",skip = 1)
dssat[,c(2:10)]= dssat[,c(2:10)]/0.44
dssat
colnames(dssat)=c("time","3.0","2.95","2.85","2.7","2.55","2.4","2.25","2.1","1.8")
dssat%>%
gather("Zsurf","VWC",`3.0`:`1.8`)->dssat
dssat$Zsurf=as.numeric(dssat$Zsurf)
dssat$model="dssat"
final_data%>%
select(time,Zsurf,VWC)%>%
filter(Zsurf>1)->hgs
hgs$model="hgs"
ggplot() +
geom_line(data = hgs, aes(x = time, y = VWC, col = model), size = 1) +
geom_point(data = dssat, aes(x = time, y = VWC, color = model), size = 1, shape = 16) +
labs(x = "Time", y = "Volumetric Water Content (VWC)", color = "Zsurf") +
facet_wrap(~as.factor(Zsurf))+
theme_minimal()
colSums(data[,c(3:21)])
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\model\\HGS\\stand_alone\\lys\\hgs")
library(ggplot2)
library(tidyr)
library(dplyr)
options(scipen=999)
file_path <- "lys_Eo.observation_well_flow.sat_prof.dat"
lines <- readLines(file_path)
# Find the line with VARIABLES
var_line <- grep("^VARIABLES=", lines)
variables <- gsub('^VARIABLES=|\"', '', lines[var_line])
var_names <- strsplit(variables, ",")[[1]]
var_names <- trimws(var_names)
# Find the start lines of ZONE blocks
zone_lines <- grep("^ZONE", lines)
zone_starts <- zone_lines
zone_ends <- c(zone_lines[-1] - 1, length(lines))
# Initialize a list to store zone data
zone_data_list <- list()
for (i in seq_along(zone_starts)) {
zone_header <- lines[zone_starts[i]]
# Extract SOLUTIONTIME from ZONE header
sol_time <- as.numeric(sub(".*SOLUTIONTIME=([0-9.Ee+-]+).*", "\\1", zone_header))
# Extract number of rows in this zone (from I=13)
num_rows <- as.numeric(sub(".*I=([0-9]+).*", "\\1", zone_header))
# Extract the raw data block
data_lines <- lines[(zone_starts[i] + 1):zone_ends[i]]
data_values <- as.numeric(unlist(strsplit(paste(data_lines, collapse = " "), "\\s+")))
# Convert to data.frame
zone_df <- as.data.frame(matrix(data_values, ncol = length(var_names), byrow = TRUE))
colnames(zone_df) <- var_names
zone_df$time <- sol_time
# Store it
zone_data_list[[i]] <- zone_df
}
final_data <- do.call(rbind, zone_data_list)
#### water balance ####
lines_w=readLines("lys_Eo.water_balance.dat")
# Find line with VARIABLES
var_line_index <- grep("^VARIABLES=", lines_w)
var_line <- lines_w[var_line_index]
# Extract variable names
# Remove 'VARIABLES=' and split on comma
var_names <- gsub('^VARIABLES=', '', var_line)
var_names <- gsub('"', '', var_names)  # remove quotes
var_names <- trimws(unlist(strsplit(var_names, ",")))
# Find the first line of actual data (starts after 'zone t=' line)
zone_line_index <- grep("^zone",lines_w, ignore.case = TRUE)
data_start_index <- zone_line_index + 1
# Read the data portion only
data_lines <- lines_w[data_start_index:length(lines_w)]
data <- read.table(text = paste(data_lines, collapse = "\n"), col.names = var_names)
data$time_d=data$Time[1]
data$time_d[2:116]=data$Time[2:116]-data$Time[1:115]
data=data[,c(1,21,2:20)]
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\HGS_standalone")
write.table(data,"hgs_watbal.csv",col.names = T,row.names = F,sep = ",",dec = ".")
data[,c(3:21)]=data[,c(3:21)]/4*data$time_d*1000
#### dssat ####
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\DSSAT_no_inflow_satflow")
library(readxl)
dssat=read_xlsx(path = "dssat-hgs.xlsx",sheet = "Sat layer DSSAT wheat",skip = 1)
dssat[,c(2:10)]= dssat[,c(2:10)]/0.44
dssat
colnames(dssat)=c("time","3.0","2.95","2.85","2.7","2.55","2.4","2.25","2.1","1.8")
dssat%>%
gather("Zsurf","VWC",`3.0`:`1.8`)->dssat
dssat$Zsurf=as.numeric(dssat$Zsurf)
dssat$model="dssat"
final_data%>%
select(time,Zsurf,VWC)%>%
filter(Zsurf>1)->hgs
hgs$model="hgs"
ggplot() +
geom_line(data = hgs, aes(x = time, y = VWC, col = model), size = 1) +
geom_point(data = dssat, aes(x = time, y = VWC, color = model), size = 1, shape = 16) +
labs(x = "Time", y = "Volumetric Water Content (VWC)", color = "Zsurf") +
facet_wrap(~as.factor(Zsurf))+
theme_minimal()
colSums(data[,c(3:21)])
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\model\\HGS\\stand_alone\\lys\\hgs")
library(ggplot2)
library(tidyr)
library(dplyr)
options(scipen=999)
file_path <- "lys_Eo.observation_well_flow.sat_prof.dat"
lines <- readLines(file_path)
# Find the line with VARIABLES
var_line <- grep("^VARIABLES=", lines)
variables <- gsub('^VARIABLES=|\"', '', lines[var_line])
var_names <- strsplit(variables, ",")[[1]]
var_names <- trimws(var_names)
# Find the start lines of ZONE blocks
zone_lines <- grep("^ZONE", lines)
zone_starts <- zone_lines
zone_ends <- c(zone_lines[-1] - 1, length(lines))
# Initialize a list to store zone data
zone_data_list <- list()
for (i in seq_along(zone_starts)) {
zone_header <- lines[zone_starts[i]]
# Extract SOLUTIONTIME from ZONE header
sol_time <- as.numeric(sub(".*SOLUTIONTIME=([0-9.Ee+-]+).*", "\\1", zone_header))
# Extract number of rows in this zone (from I=13)
num_rows <- as.numeric(sub(".*I=([0-9]+).*", "\\1", zone_header))
# Extract the raw data block
data_lines <- lines[(zone_starts[i] + 1):zone_ends[i]]
data_values <- as.numeric(unlist(strsplit(paste(data_lines, collapse = " "), "\\s+")))
# Convert to data.frame
zone_df <- as.data.frame(matrix(data_values, ncol = length(var_names), byrow = TRUE))
colnames(zone_df) <- var_names
zone_df$time <- sol_time
# Store it
zone_data_list[[i]] <- zone_df
}
final_data <- do.call(rbind, zone_data_list)
#### water balance ####
lines_w=readLines("lys_Eo.water_balance.dat")
# Find line with VARIABLES
var_line_index <- grep("^VARIABLES=", lines_w)
var_line <- lines_w[var_line_index]
# Extract variable names
# Remove 'VARIABLES=' and split on comma
var_names <- gsub('^VARIABLES=', '', var_line)
var_names <- gsub('"', '', var_names)  # remove quotes
var_names <- trimws(unlist(strsplit(var_names, ",")))
# Find the first line of actual data (starts after 'zone t=' line)
zone_line_index <- grep("^zone",lines_w, ignore.case = TRUE)
data_start_index <- zone_line_index + 1
# Read the data portion only
data_lines <- lines_w[data_start_index:length(lines_w)]
data <- read.table(text = paste(data_lines, collapse = "\n"), col.names = var_names)
data$time_d=data$Time[1]
data$time_d[2:116]=data$Time[2:116]-data$Time[1:115]
data=data[,c(1,21,2:20)]
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\HGS_standalone")
write.table(data,"hgs_watbal.csv",col.names = T,row.names = F,sep = ",",dec = ".")
data[,c(3:21)]=data[,c(3:21)]/4*data$time_d*1000
#### dssat ####
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\DSSAT_no_inflow_satflow")
library(readxl)
dssat=read_xlsx(path = "dssat-hgs.xlsx",sheet = "Sat layer DSSAT wheat",skip = 1)
dssat[,c(2:10)]= dssat[,c(2:10)]/0.44
dssat
colnames(dssat)=c("time","3.0","2.95","2.85","2.7","2.55","2.4","2.25","2.1","1.8")
dssat%>%
gather("Zsurf","VWC",`3.0`:`1.8`)->dssat
dssat$Zsurf=as.numeric(dssat$Zsurf)
dssat$model="dssat"
final_data%>%
select(time,Zsurf,VWC)%>%
filter(Zsurf>1)->hgs
hgs$model="hgs"
ggplot() +
geom_line(data = hgs, aes(x = time, y = VWC, col = model), size = 1) +
geom_point(data = dssat, aes(x = time, y = VWC, color = model), size = 1, shape = 16) +
labs(x = "Time", y = "Volumetric Water Content (VWC)", color = "Zsurf") +
facet_wrap(~as.factor(Zsurf))+
theme_minimal()
colSums(data[,c(3:21)])
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\model\\HGS\\stand_alone\\lys\\hgs")
library(ggplot2)
library(tidyr)
library(dplyr)
options(scipen=999)
file_path <- "lys_Eo.observation_well_flow.sat_prof.dat"
lines <- readLines(file_path)
# Find the line with VARIABLES
var_line <- grep("^VARIABLES=", lines)
variables <- gsub('^VARIABLES=|\"', '', lines[var_line])
var_names <- strsplit(variables, ",")[[1]]
var_names <- trimws(var_names)
# Find the start lines of ZONE blocks
zone_lines <- grep("^ZONE", lines)
zone_starts <- zone_lines
zone_ends <- c(zone_lines[-1] - 1, length(lines))
# Initialize a list to store zone data
zone_data_list <- list()
for (i in seq_along(zone_starts)) {
zone_header <- lines[zone_starts[i]]
# Extract SOLUTIONTIME from ZONE header
sol_time <- as.numeric(sub(".*SOLUTIONTIME=([0-9.Ee+-]+).*", "\\1", zone_header))
# Extract number of rows in this zone (from I=13)
num_rows <- as.numeric(sub(".*I=([0-9]+).*", "\\1", zone_header))
# Extract the raw data block
data_lines <- lines[(zone_starts[i] + 1):zone_ends[i]]
data_values <- as.numeric(unlist(strsplit(paste(data_lines, collapse = " "), "\\s+")))
# Convert to data.frame
zone_df <- as.data.frame(matrix(data_values, ncol = length(var_names), byrow = TRUE))
colnames(zone_df) <- var_names
zone_df$time <- sol_time
# Store it
zone_data_list[[i]] <- zone_df
}
final_data <- do.call(rbind, zone_data_list)
#### water balance ####
lines_w=readLines("lys_Eo.water_balance.dat")
# Find line with VARIABLES
var_line_index <- grep("^VARIABLES=", lines_w)
var_line <- lines_w[var_line_index]
# Extract variable names
# Remove 'VARIABLES=' and split on comma
var_names <- gsub('^VARIABLES=', '', var_line)
var_names <- gsub('"', '', var_names)  # remove quotes
var_names <- trimws(unlist(strsplit(var_names, ",")))
# Find the first line of actual data (starts after 'zone t=' line)
zone_line_index <- grep("^zone",lines_w, ignore.case = TRUE)
data_start_index <- zone_line_index + 1
# Read the data portion only
data_lines <- lines_w[data_start_index:length(lines_w)]
data <- read.table(text = paste(data_lines, collapse = "\n"), col.names = var_names)
data$time_d=data$Time[1]
data$time_d[2:116]=data$Time[2:116]-data$Time[1:115]
data=data[,c(1,21,2:20)]
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\HGS_standalone")
write.table(data,"hgs_watbal.csv",col.names = T,row.names = F,sep = ",",dec = ".")
data[,c(3:21)]=data[,c(3:21)]/4*data$time_d*1000
#### dssat ####
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\DSSAT_no_inflow_satflow")
library(readxl)
dssat=read_xlsx(path = "dssat-hgs.xlsx",sheet = "Sat layer DSSAT wheat",skip = 1)
dssat[,c(2:10)]= dssat[,c(2:10)]/0.44
dssat
colnames(dssat)=c("time","3.0","2.95","2.85","2.7","2.55","2.4","2.25","2.1","1.8")
dssat%>%
gather("Zsurf","VWC",`3.0`:`1.8`)->dssat
dssat$Zsurf=as.numeric(dssat$Zsurf)
dssat$model="dssat"
final_data%>%
select(time,Zsurf,VWC)%>%
filter(Zsurf>1)->hgs
hgs$model="hgs"
ggplot() +
geom_line(data = hgs, aes(x = time, y = VWC, col = model), size = 1) +
geom_point(data = dssat, aes(x = time, y = VWC, color = model), size = 1, shape = 16) +
labs(x = "Time", y = "Volumetric Water Content (VWC)", color = "Zsurf") +
facet_wrap(~as.factor(Zsurf))+
theme_minimal()
colSums(data[,c(3:21)])
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\model\\HGS\\stand_alone\\lys\\hgs")
library(ggplot2)
library(tidyr)
library(dplyr)
options(scipen=999)
file_path <- "lys_Eo.observation_well_flow.sat_prof.dat"
lines <- readLines(file_path)
# Find the line with VARIABLES
var_line <- grep("^VARIABLES=", lines)
variables <- gsub('^VARIABLES=|\"', '', lines[var_line])
var_names <- strsplit(variables, ",")[[1]]
var_names <- trimws(var_names)
# Find the start lines of ZONE blocks
zone_lines <- grep("^ZONE", lines)
zone_starts <- zone_lines
zone_ends <- c(zone_lines[-1] - 1, length(lines))
# Initialize a list to store zone data
zone_data_list <- list()
for (i in seq_along(zone_starts)) {
zone_header <- lines[zone_starts[i]]
# Extract SOLUTIONTIME from ZONE header
sol_time <- as.numeric(sub(".*SOLUTIONTIME=([0-9.Ee+-]+).*", "\\1", zone_header))
# Extract number of rows in this zone (from I=13)
num_rows <- as.numeric(sub(".*I=([0-9]+).*", "\\1", zone_header))
# Extract the raw data block
data_lines <- lines[(zone_starts[i] + 1):zone_ends[i]]
data_values <- as.numeric(unlist(strsplit(paste(data_lines, collapse = " "), "\\s+")))
# Convert to data.frame
zone_df <- as.data.frame(matrix(data_values, ncol = length(var_names), byrow = TRUE))
colnames(zone_df) <- var_names
zone_df$time <- sol_time
# Store it
zone_data_list[[i]] <- zone_df
}
final_data <- do.call(rbind, zone_data_list)
#### water balance ####
lines_w=readLines("lys_Eo.water_balance.dat")
# Find line with VARIABLES
var_line_index <- grep("^VARIABLES=", lines_w)
var_line <- lines_w[var_line_index]
# Extract variable names
# Remove 'VARIABLES=' and split on comma
var_names <- gsub('^VARIABLES=', '', var_line)
var_names <- gsub('"', '', var_names)  # remove quotes
var_names <- trimws(unlist(strsplit(var_names, ",")))
# Find the first line of actual data (starts after 'zone t=' line)
zone_line_index <- grep("^zone",lines_w, ignore.case = TRUE)
data_start_index <- zone_line_index + 1
# Read the data portion only
data_lines <- lines_w[data_start_index:length(lines_w)]
data <- read.table(text = paste(data_lines, collapse = "\n"), col.names = var_names)
data$time_d=data$Time[1]
data$time_d[2:116]=data$Time[2:116]-data$Time[1:115]
data=data[,c(1,21,2:20)]
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\HGS_standalone")
write.table(data,"hgs_watbal.csv",col.names = T,row.names = F,sep = ",",dec = ".")
data[,c(3:21)]=data[,c(3:21)]/4*data$time_d*1000
#### dssat ####
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\DSSAT_no_inflow_satflow")
library(readxl)
dssat=read_xlsx(path = "dssat-hgs.xlsx",sheet = "Sat layer DSSAT wheat",skip = 1)
dssat[,c(2:10)]= dssat[,c(2:10)]/0.44
dssat
colnames(dssat)=c("time","3.0","2.95","2.85","2.7","2.55","2.4","2.25","2.1","1.8")
dssat%>%
gather("Zsurf","VWC",`3.0`:`1.8`)->dssat
dssat$Zsurf=as.numeric(dssat$Zsurf)
dssat$model="dssat"
final_data%>%
select(time,Zsurf,VWC)%>%
filter(Zsurf>1)->hgs
hgs$model="hgs"
ggplot() +
geom_line(data = hgs, aes(x = time, y = VWC, col = model), size = 1) +
geom_point(data = dssat, aes(x = time, y = VWC, color = model), size = 1, shape = 16) +
labs(x = "Time", y = "Volumetric Water Content (VWC)", color = "Zsurf") +
facet_wrap(~as.factor(Zsurf))+
theme_minimal()
colSums(data[,c(3:21)])
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\model\\HGS\\stand_alone\\lys\\hgs")
library(ggplot2)
library(tidyr)
library(dplyr)
options(scipen=999)
file_path <- "lys_Eo.observation_well_flow.sat_prof.dat"
lines <- readLines(file_path)
# Find the line with VARIABLES
var_line <- grep("^VARIABLES=", lines)
variables <- gsub('^VARIABLES=|\"', '', lines[var_line])
var_names <- strsplit(variables, ",")[[1]]
var_names <- trimws(var_names)
# Find the start lines of ZONE blocks
zone_lines <- grep("^ZONE", lines)
zone_starts <- zone_lines
zone_ends <- c(zone_lines[-1] - 1, length(lines))
# Initialize a list to store zone data
zone_data_list <- list()
for (i in seq_along(zone_starts)) {
zone_header <- lines[zone_starts[i]]
# Extract SOLUTIONTIME from ZONE header
sol_time <- as.numeric(sub(".*SOLUTIONTIME=([0-9.Ee+-]+).*", "\\1", zone_header))
# Extract number of rows in this zone (from I=13)
num_rows <- as.numeric(sub(".*I=([0-9]+).*", "\\1", zone_header))
# Extract the raw data block
data_lines <- lines[(zone_starts[i] + 1):zone_ends[i]]
data_values <- as.numeric(unlist(strsplit(paste(data_lines, collapse = " "), "\\s+")))
# Convert to data.frame
zone_df <- as.data.frame(matrix(data_values, ncol = length(var_names), byrow = TRUE))
colnames(zone_df) <- var_names
zone_df$time <- sol_time
# Store it
zone_data_list[[i]] <- zone_df
}
final_data <- do.call(rbind, zone_data_list)
#### water balance ####
lines_w=readLines("lys_Eo.water_balance.dat")
# Find line with VARIABLES
var_line_index <- grep("^VARIABLES=", lines_w)
var_line <- lines_w[var_line_index]
# Extract variable names
# Remove 'VARIABLES=' and split on comma
var_names <- gsub('^VARIABLES=', '', var_line)
var_names <- gsub('"', '', var_names)  # remove quotes
var_names <- trimws(unlist(strsplit(var_names, ",")))
# Find the first line of actual data (starts after 'zone t=' line)
zone_line_index <- grep("^zone",lines_w, ignore.case = TRUE)
data_start_index <- zone_line_index + 1
# Read the data portion only
data_lines <- lines_w[data_start_index:length(lines_w)]
data <- read.table(text = paste(data_lines, collapse = "\n"), col.names = var_names)
data$time_d=data$Time[1]
data$time_d[2:116]=data$Time[2:116]-data$Time[1:115]
data=data[,c(1,21,2:20)]
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\HGS_standalone")
write.table(data,"hgs_watbal.csv",col.names = T,row.names = F,sep = ",",dec = ".")
data[,c(3:21)]=data[,c(3:21)]/4*data$time_d*1000
#### dssat ####
setwd("C:\\Users\\glogow0000\\HGS-DSSAT\\analysis\\DSSAT_no_inflow_satflow")
library(readxl)
dssat=read_xlsx(path = "dssat-hgs.xlsx",sheet = "Sat layer DSSAT wheat",skip = 1)
dssat[,c(2:10)]= dssat[,c(2:10)]/0.44
dssat
colnames(dssat)=c("time","3.0","2.95","2.85","2.7","2.55","2.4","2.25","2.1","1.8")
dssat%>%
gather("Zsurf","VWC",`3.0`:`1.8`)->dssat
dssat$Zsurf=as.numeric(dssat$Zsurf)
dssat$model="dssat"
final_data%>%
select(time,Zsurf,VWC)%>%
filter(Zsurf>1)->hgs
hgs$model="hgs"
ggplot() +
geom_line(data = hgs, aes(x = time, y = VWC, col = model), size = 1) +
geom_point(data = dssat, aes(x = time, y = VWC, color = model), size = 1, shape = 16) +
labs(x = "Time", y = "Volumetric Water Content (VWC)", color = "Zsurf") +
facet_wrap(~as.factor(Zsurf))+
theme_minimal()
colSums(data[,c(3:21)])
